input {
  tcp {
    port => 5044
    codec => json_lines
  }
  # Получение логов от Docker контейнеров через filebeat
  beats {
    port => 5045
    host => "0.0.0.0"
  }
  # Прямое чтение файлов логов для отладки
  file {
    path => ["/var/log/stormmatrix/*.log"]
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "stormmatrix-logs"
  }
}

filter {
  if [type] == "stormmatrix-logs" {
    json {
      source => "message"
    }
  }
  
  # Добавляем метки для различных сервисов
  if [docker][container][name] =~ /stormmatrix-auth-service/ {
    mutate {
      add_field => { "service" => "auth-service" }
    }
  } else if [docker][container][name] =~ /stormmatrix-user-service/ {
    mutate {
      add_field => { "service" => "user-service" }
    }
  } else if [docker][container][name] =~ /stormmatrix-board-service/ {
    mutate {
      add_field => { "service" => "board-service" }
    }
  } else if [docker][container][name] =~ /stormmatrix-notification-service/ {
    mutate {
      add_field => { "service" => "notification-service" }
    }
  } else if [docker][container][name] =~ /stormmatrix-file-service/ {
    mutate {
      add_field => { "service" => "file-service" }
    }
  }
  
  # Разбор сообщений об ошибках
  grok {
    match => { "message" => "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}T%{HOUR}:%{MINUTE}:%{SECOND}.%{INT}Z) %{LOGLEVEL:log_level} (?<component>\[[\w\s-]+\]) (?<content>.*)" }
    break_on_match => false
  }
  
  # Обработка меток времени
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "stormmatrix-logs-%{+YYYY.MM.dd}"
    document_type => "log"
  }
  stdout {
    codec => rubydebug
  }
}