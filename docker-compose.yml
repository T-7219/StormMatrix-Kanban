version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: stormmatrix-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_MULTIPLE_DATABASES: auth_db,board_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # Cache and session store
  redis:
    image: redis:7-alpine
    container_name: stormmatrix-redis
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # Message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: stormmatrix-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management interface
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # API Gateway
  nginx:
    image: nginx:1.24-alpine
    container_name: stormmatrix-nginx
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - board-service
      - user-service
      - notification-service
      - file-service
      - frontend
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # Microservices
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-auth-service
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-devjwtsecret}
      - JWT_EXPIRES_IN=3600
      - RABBIT_MQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
    command: npm run start:debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - stormmatrix-network

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-user-service
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    ports:
      - "3002:3002"
      - "9230:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-devjwtsecret}
      - RABBIT_MQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
    command: npm run start:debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - stormmatrix-network

  board-service:
    build:
      context: ./backend/board-service
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-board-service
    volumes:
      - ./backend/board-service:/app
      - /app/node_modules
    ports:
      - "3003:3003"
      - "9231:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=board_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-devjwtsecret}
      - RABBIT_MQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
    command: npm run start:debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - stormmatrix-network

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-notification-service
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules
    ports:
      - "3004:3004"
      - "9232:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=board_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-devjwtsecret}
      - RABBIT_MQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
    command: npm run start:debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - stormmatrix-network

  file-service:
    build:
      context: ./backend/file-service
      dockerfile: Dockerfile.dev
    container_name: stormmatrix-file-service
    volumes:
      - ./backend/file-service:/app
      - /app/node_modules
      - uploaded-files:/app/uploads
    ports:
      - "3005:3005"
      - "9233:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=board_db
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-devjwtsecret}
      - UPLOAD_DIR=/app/uploads
      - RABBIT_MQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
    command: npm run start:debug
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - stormmatrix-network

  # Monitoring and Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: stormmatrix-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - stormmatrix-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: stormmatrix-logstash
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    command: logstash -f /usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - stormmatrix-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: stormmatrix-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - stormmatrix-network

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: stormmatrix-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - stormmatrix-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: stormmatrix-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3200:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - stormmatrix-network

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  uploaded-files:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  stormmatrix-network:
    driver: bridge